name: build # 工作流名称
on: [push, workflow_dispatch] # 代码推送到仓库时触发或手动触发
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # 旧配置 全版本编译
        # os: [windows-latest, macos-latest, ubuntu-latest]
        # build_type: [RelWithDebInfo, Debug]
        # ui: [gui, cli]
        # scripting: [lua, noscripts]
        # exclude:
        #   - build_type: Debug
        #     ui: gui
        #   - build_type: RelWithDebInfo
        #     ui: cli
        #   - build_type: RelWithDebInfo
        #     scripting: noscripts
        os: [windows-latest]  # 仅编译windows版本
        build_type: [Release] # 仅编译发布版本
        ui: [gui]             # 仅编译图形用户界面版本
        scripting: [lua]      # 仅编译启用Lua脚本支持版本
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    - name: Install Dependencies
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y \
          libpixman-1-dev libfreetype6-dev libharfbuzz-dev zlib1g-dev \
          libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev
    # 新增：Windows依赖安装
    - name: Install Windows Dependencies
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        # 安装vcpkg并配置
        git clone https://github.com/Microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat
        .\vcpkg\vcpkg integrate install
        # 安装所需库
        .\vcpkg\vcpkg install freetype harfbuzz libjpeg-turbo libwebp --triplet=x64-windows-static
        # 设置环境变量供CMake使用
        $vcpkgRoot = (Resolve-Path .\vcpkg).Path
        echo "VCPKG_ROOT=$vcpkgRoot" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "CMAKE_TOOLCHAIN_FILE=$vcpkgRoot\scripts\buildsystems\vcpkg.cmake" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    - name: Install Skia
      if: ${{ matrix.ui == 'gui' }}
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          this_dir=$(cygpath "${{ github.workspace }}")
        else
          this_dir="${{ github.workspace }}"
        fi
        skia_url=$(source $this_dir/laf/misc/skia-url.sh | xargs)
        skia_file=$(basename $skia_url)
        curl --ssl-revoke-best-effort -L -o "$skia_file" "$skia_url"
        unzip "$skia_file" -d skia
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2.17
      if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      with:
        key: ${{ matrix.os }}-${{ matrix.ui }}-${{ matrix.scripting }}-${{ matrix.build_type }}
    - uses: aseprite/get-ninja@main
    - uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'
    - name: Generating Makefiles
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          export enable_ccache=off
        else
          export enable_ccache=on
        fi

        if [[ "${{ matrix.ui }}" == "gui" ]] ; then
          export laf_backend=skia
        else
          export laf_backend=none
        fi

        if [[ "${{ matrix.scripting }}" == "lua" ]] ; then
          export enable_scripting=on
        else
          export enable_scripting=off
        fi

        if [[ "${{ runner.os }}" == "macOS" ]] ; then
          export skia_arch=arm64
        else
          export skia_arch=x64
        fi
        
        # 添加vcpkg工具链参数
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          vcpkg_args="-DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE} -DVCPKG_TARGET_TRIPLET=x64-windows-static"
        else
          vcpkg_args=""
        fi

        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
          -DENABLE_TESTS=OFF \ # 不启用测试支持
          -DENABLE_SCRIPTING=$enable_scripting \
          -DENABLE_CCACHE=$enable_ccache \
          -DLAF_BACKEND=$laf_backend \
          -DSKIA_DIR=$(realpath skia) \
          -DSKIA_LIBRARY_DIR=$(realpath skia/out/Release-$skia_arch) \
          -DOPENSSL_USE_STATIC_LIBS=ON \
          $vcpkg_args
    - name: Compiling
      shell: bash
      run: |
        cd build && ninja
    # 旧配置 用于编译时调试测试
    # - name: Running C++ Tests
    #   shell: bash
    #   run: |
    #     if [[ "${{ runner.os }}" == "Linux" ]] ; then
    #       export XVFB=xvfb-run
    #     fi
    #     cd build && $XVFB ctest --output-on-failure
    # - name: Running CLI Tests
    #   if: ${{ matrix.scripting == 'lua' }}
    #   shell: bash
    #   run: |
    #     if [[ "${{ runner.os }}" == "Linux" ]] ; then
    #       export XVFB=xvfb-run
    #     fi
    #     export ASEPRITE=$PWD/build/bin/aseprite
    #     cd tests
    #     $XVFB bash run-tests.sh
    # 新增配置 提交后直接进行编译
    - uses: actions/upload-artifact@v4
      with:
        name: aseprite-${{ runner.os }}-${{ matrix.ui }}-${{ matrix.scripting }}-${{ matrix.build_type }} # 编译完成后的文件名称
        path: |
          ${{ github.workspace }}/build/bin/data
          ${{ github.workspace }}/build/bin/aseprite.exe
