name: build
on: [push, pull_request, workflow_dispatch]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # os: [windows-latest, macos-latest, ubuntu-latest]
        # build_type: [RelWithDebInfo, Debug]
        # ui: [gui, cli]
        # scripting: [lua, noscripts]
        os: [windows-latest]
        build_type: [RelWithDebInfo]
        ui: [gui]
        scripting: [lua]
        exclude:
          - build_type: Debug
            ui: gui
          - build_type: RelWithDebInfo
            ui: cli
          - build_type: RelWithDebInfo
            scripting: noscripts
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    # 仅在 Windows GUI 构建中安装 OpenSSL 构建依赖
    - name: Install OpenSSL build dependencies
      if: ${{ runner.os == 'Windows' && matrix.ui == 'gui' }}
      shell: powershell
      run: |
        # 安装 Strawberry Perl - 仅在未安装时执行
        if (-not (Test-Path "C:\Strawberry\perl\bin\perl.exe")) {
          choco install -y --no-progress strawberryperl
        } else {
          Write-Host "Strawberry Perl already installed"
        }
        
        # 安装 NASM - 仅在未安装时执行
        if (-not (Test-Path "C:\Program Files\NASM\nasm.exe")) {
          choco install -y --no-progress nasm
        } else {
          Write-Host "NASM already installed"
        }
        
        # 添加 Perl 路径到环境变量
        $perlPath = "C:\Strawberry\perl\bin"
        Write-Host "Adding Perl path: $perlPath"
        Add-Content -Path $env:GITHUB_PATH -Value $perlPath
        
        # 直接查找 NASM 可执行文件路径
        $nasmPath = $null
        # 检查默认安装路径
        if (Test-Path "C:\Program Files\NASM\nasm.exe") {
          $nasmPath = "C:\Program Files\NASM"
        }
        # 如果未找到，尝试在 Chocolatey 安装目录查找
        if (-not $nasmPath) {
          $chocoPath = "C:\ProgramData\chocolatey\lib\nasm\tools"
          if (Test-Path "$chocoPath\nasm.exe") {
            $nasmPath = $chocoPath
          }
        }
        # 如果仍未找到，尝试搜索整个系统
        if (-not $nasmPath) {
          $nasmExe = Get-Command nasm -ErrorAction SilentlyContinue
          if ($nasmExe) {
            $nasmPath = (Get-Item $nasmExe.Path).Directory.FullName
          }
        }
        
        if ($nasmPath) {
          Write-Host "Found NASM at: $nasmPath"
          Add-Content -Path $env:GITHUB_PATH -Value $nasmPath
          Write-Host "NASM_PATH=$nasmPath" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          
          # 验证 NASM
          & "$nasmPath\nasm.exe" -v
        } else {
          Write-Host "ERROR: NASM not found!"
          exit 1
        }
        
        # 验证 Perl
        perl -v
    # 构建静态 OpenSSL
    - name: Build static OpenSSL
      if: ${{ runner.os == 'Windows' && matrix.ui == 'gui' }}
      shell: powershell
      run: |
        # 创建构建目录
        mkdir openssl-build
        cd openssl-build
        
        # 下载 OpenSSL 源代码
        $OPENSSL_VERSION = "1.1.1w"
        $OPENSSL_URL = "https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz"
        Write-Host "正在下载 OpenSSL $OPENSSL_VERSION..."
        Invoke-WebRequest -Uri $OPENSSL_URL -OutFile openssl.tar.gz -MaximumRedirection 5
        
        # 解压源代码 - 使用 7zip
        Write-Host "解压 OpenSSL 源代码..."
        # 第一步：解压 gzip
        & "$env:ProgramFiles\7-Zip\7z.exe" x openssl.tar.gz
        # 第二步：解压 tar 文件（注意 -o 参数后有空格）
        & "$env:ProgramFiles\7-Zip\7z.exe" x openssl.tar -o .
        
        # 查找并重命名解压后的目录
        $opensslDir = Get-ChildItem -Directory | Where-Object { $_.Name -like "openssl-*" } | Select-Object -First 1
        if ($null -eq $opensslDir) {
            Write-Host "错误：未找到 openssl 目录"
            Get-ChildItem -Recurse | Format-Table
            exit 1
        }
        
        Write-Host "找到 OpenSSL 目录: $($opensslDir.Name)"
        # 移动所有文件到当前目录
        Get-ChildItem -Path $opensslDir.FullName | Move-Item -Destination . -Force
        # 删除空目录
        Remove-Item -Path $opensslDir.FullName -Recurse -Force
        
        # 验证 NASM 可用性
        Write-Host "验证 NASM 可用性:"
        nasm -v
        
        # 使用 Windows 原生路径运行配置
        Write-Host "运行 OpenSSL 配置..."
        perl Configure VC-WIN64A no-shared --prefix="$pwd\install" -MT
        
        # 构建并安装
        nmake
        nmake install
        
        # 设置环境变量
        $installPath = (Resolve-Path .).Path + "\install"
        Write-Host "OPENSSL_ROOT_DIR=$installPath" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
        Write-Host "OpenSSL 已安装在: $installPath"
    # 构建静态 Skia
    - name: Build static Skia
      if: ${{ runner.os == 'Windows' && matrix.ui == 'gui' }}
      shell: bash
      run: |
        git clone https://github.com/google/skia.git
        cd skia
        # 同步依赖
        python tools/git-sync-deps
        # 配置 GN 构建参数 - 静态链接 OpenSSL
        bin/gn gen out/Static --args='
            is_official_build=true
            is_debug=false
            target_cpu="x64"
            skia_use_openssl=true
            skia_use_system_openssl=true
            extra_cflags=["/MT"]
            extra_ldflags=["/NODEFAULTLIB:LIBCMT"]
            skia_enable_tools=false
            skia_enable_pdf=false
            skia_enable_gpu=false
        '
        # 构建 Skia
        ninja -C out/Static
        # 设置环境变量供后续步骤使用
        echo "SKIA_BUILD_DIR=$(pwd)/out/Static" >> $GITHUB_ENV
    - name: Install Dependencies
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y \
          libpixman-1-dev libfreetype6-dev libharfbuzz-dev zlib1g-dev \
          libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev
    - name: Install Skia
      if: ${{ !(runner.os == 'Windows' && matrix.ui == 'gui') && matrix.ui == 'gui' }}
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          this_dir=$(cygpath "${{ github.workspace }}")
        else
          this_dir="${{ github.workspace }}"
        fi
        skia_url=$(source $this_dir/laf/misc/skia-url.sh | xargs)
        skia_file=$(basename $skia_url)
        curl --ssl-revoke-best-effort -L -o "$skia_file" "$skia_url"
        unzip "$skia_file" -d skia
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2.17
      if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      with:
        key: ${{ matrix.os }}-${{ matrix.ui }}-${{ matrix.scripting }}-${{ matrix.build_type }}
    - uses: aseprite/get-ninja@main
    - uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'
    - name: Generating Makefiles
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          export enable_ccache=off
        else
          export enable_ccache=on
        fi

        if [[ "${{ matrix.ui }}" == "gui" ]] ; then
          export laf_backend=skia
        else
          export laf_backend=none
        fi

        if [[ "${{ matrix.scripting }}" == "lua" ]] ; then
          export enable_scripting=on
        else
          export enable_scripting=off
        fi

        if [[ "${{ runner.os }}" == "macOS" ]] ; then
          export skia_arch=arm64
        else
          export skia_arch=x64
        fi

        # 设置 Skia 路径：Windows GUI 使用自定义构建，其他使用预编译
        if [[ "${{ runner.os }}" == "Windows" && "${{ matrix.ui }}" == "gui" ]] ; then
          export SKIA_DIR_PATH="${{ github.workspace }}/skia"
          export SKIA_LIB_PATH="$SKIA_BUILD_DIR"
        else
          export SKIA_DIR_PATH="$(realpath skia)"
          export SKIA_LIB_PATH="$(realpath skia/out/Release-$skia_arch)"
        fi

        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
          -DENABLE_TESTS=OFF \
          -DENABLE_SCRIPTING=$enable_scripting \
          -DENABLE_CCACHE=$enable_ccache \
          -DLAF_BACKEND=$laf_backend \
          -DSKIA_DIR=$SKIA_DIR_PATH \
          -DSKIA_LIBRARY_DIR=$SKIA_LIB_PATH
    - name: Compiling
      shell: bash
      run: |
        cd build && ninja
    # - name: Running C++ Tests
    #   shell: bash
    #   run: |
    #     if [[ "${{ runner.os }}" == "Linux" ]] ; then
    #       export XVFB=xvfb-run
    #     fi
    #     cd build && $XVFB ctest --output-on-failure
    # - name: Running CLI Tests
    #   if: ${{ matrix.scripting == 'lua' }}
    #   shell: bash
    #   run: |
    #     if [[ "${{ runner.os }}" == "Linux" ]] ; then
    #       export XVFB=xvfb-run
    #     fi
    #     export ASEPRITE=$PWD/build/bin/aseprite
    #     cd tests
    #     $XVFB bash run-tests.sh
    - name: Verify no OpenSSL DLL dependency
      if: ${{ runner.os == 'Windows' && matrix.ui == 'gui' }}
      shell: cmd
      run: |
        dumpbin /DEPENDENTS build\bin\aseprite.exe | findstr /i "libcrypto"
        if %errorlevel% equ 0 (
          echo Error: Detected OpenSSL DLL dependency!
          exit 1
        ) else (
          echo Success: No OpenSSL DLL dependency found
        )
    - uses: actions/upload-artifact@v4
      with:
        name: aseprite-${{ runner.os }}-${{ matrix.ui }}-${{ matrix.scripting }}-${{ matrix.build_type }}
        path: |
          ${{ github.workspace }}/build/bin/data
          ${{ github.workspace }}/build/bin/aseprite*
